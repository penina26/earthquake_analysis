print(df$Date)
# head(df)
#create a Shiny UI
UI = fluidPage(
titlePanel("Earthquake Analysis 1965-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("yearRange", "Select Year Range:",
min = min(df$Year),
max = max(df$Year),
value = mean(df$Year),
step = 1)
)
)
)
UI = fluidPage(
titlePanel("Earthquake Analysis 1965-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("yearRange", "Select Year Range:",
min = min(df$Year),
max = max(df$Year),
value = mean(df$Year),
step = 1)
)
)
)
library(shiny)
library(leaflet)
library(ggplot2)
library(xts)
library(lubridate)
library(dplyr)
library(tidyverse)
# Load data and handle potential issues
df <- read.csv("C:/Users/penina.wanyama/Desktop/R/statistical computing/Significant_Earthquakes-1965-2016.csv")
# filter data related to earthquakes
df <- df %>% filter(Type == "Earthquake")
# df$Date <- as.Date(df$Date)
# df$Year <- year(df$Date)
print(class(df$Date))
# head(df)
#create a Shiny UI
UI = fluidPage(
titlePanel("Earthquake Analysis 1965-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("yearRange", "Select Year Range:",
min = min(df$Year),
max = max(df$Year),
value = mean(df$Year),
step = 1)
)
)
)
# df$Date <- as.Date(df$Date)
# df$Year <- year(df$Date)
print(df$Date)
library(shiny)
library(leaflet)
library(ggplot2)
library(xts)
library(lubridate)
library(dplyr)
library(tidyverse)
# Load data and handle potential issues
df <- read.csv("C:/Users/penina.wanyama/Desktop/R/statistical computing/Significant_Earthquakes-1965-2016.csv")
# filter data related to earthquakes
df <- df %>% filter(Type == "Earthquake")
df$Date <- as.Date(df$Date)
# df$Year <- year(df$Date)
print(df$Date)
# head(df)
#create a Shiny UI
UI = fluidPage(
titlePanel("Earthquake Analysis 1965-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("yearRange", "Select Year Range:",
min = min(df$Year),
max = max(df$Year),
value = mean(df$Year),
step = 1)
)
)
)
library(shiny)
library(leaflet)
library(ggplot2)
library(xts)
library(lubridate)
library(dplyr)
library(tidyverse)
# Load data and handle potential issues
df <- read.csv("C:/Users/penina.wanyama/Desktop/R/statistical computing/Significant_Earthquakes-1965-2016.csv")
# filter data related to earthquakes
df <- df %>% filter(Type == "Earthquake")
df$Date <- as.Date(df$Date, format = "%m/%d/%Y")
# df$Year <- year(df$Date)
print(df$Date)
# head(df)
#create a Shiny UI
UI = fluidPage(
titlePanel("Earthquake Analysis 1965-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("yearRange", "Select Year Range:",
min = min(df$Year),
max = max(df$Year),
value = mean(df$Year),
step = 1)
)
)
)
library(shiny)
library(leaflet)
library(ggplot2)
library(xts)
library(lubridate)
library(dplyr)
library(tidyverse)
# Load data and handle potential issues
df <- read.csv("C:/Users/penina.wanyama/Desktop/R/statistical computing/Significant_Earthquakes-1965-2016.csv")
# filter data related to earthquakes
df <- df %>% filter(Type == "Earthquake")
df$Date <- as.Date(df$Date, format = "%m/%d/%Y")
df$Year <- year(df$Date)
print(df$Year)
# head(df)
#create a Shiny UI
UI = fluidPage(
titlePanel("Earthquake Analysis 1965-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("yearRange", "Select Year Range:",
min = min(df$Year),
max = max(df$Year),
value = mean(df$Year),
step = 1)
)
)
)
library(shiny)
library(leaflet)
library(ggplot2)
library(xts)
library(lubridate)
library(dplyr)
library(tidyverse)
# Load data and handle potential issues
df <- read.csv("C:/Users/penina.wanyama/Desktop/R/statistical computing/Significant_Earthquakes-1965-2016.csv")
# filter data related to earthquakes
df <- df %>% filter(Type == "Earthquake")
df$Date <- as.Date(df$Date, format = "%m/%d/%Y")
df$Year <- year(df$Date)
print(df$Year)
# head(df)
#create a Shiny UI
UI = fluidPage(
titlePanel("Earthquake Analysis 1965-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("yearRange", "Select Year Range:",
min = min(df$Year),
max = max(df$Year),
value = mean(df$Year),
step = 1)
)
)
)
library(shiny)
library(leaflet)
library(ggplot2)
library(xts)
library(lubridate)
library(dplyr)
library(tidyverse)
# Load data and handle potential issues
df <- read.csv("C:/Users/penina.wanyama/Desktop/R/statistical computing/Significant_Earthquakes-1965-2016.csv")
# filter data related to earthquakes
df <- df %>% filter(Type == "Earthquake")
df$Date <- as.Date(df$Date, format = "%m/%d/%Y")
df$Year <- year(df$Date)
df <- df[!is.na(df$Year), ]
# head(df)
#create a Shiny UI
UI = fluidPage(
titlePanel("Earthquake Analysis 1965-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("yearRange", "Select Year Range:",
min = min(df$Year),
max = max(df$Year),
value = mean(df$Year),
step = 1)
)
)
)
UI = fluidPage(
titlePanel("Earthquake Analysis 1965-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("yearRange", "Select Year Range:",
min = min(df$Year),
max = max(df$Year),
value = mean(df$Year),
step = 1)
)
),
mainPanel(
plot()
)
)
library(shiny)
library(leaflet)
library(ggplot2)
library(xts)
library(lubridate)
library(dplyr)
library(tidyverse)
# Load data and handle potential issues
df <- read.csv("C:/Users/penina.wanyama/Desktop/R/statistical computing/Significant_Earthquakes-1965-2016.csv")
# filter data related to earthquakes
df <- df %>% filter(Type == "Earthquake")
df$Date <- as.Date(df$Date, format = "%m/%d/%Y")
df$Year <- year(df$Date)
df <- df[!is.na(df$Year), ]
# head(df)
#create a Shiny UI
UI = fluidPage(
titlePanel("Earthquake Analysis 1965-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("yearRange", "Select Year Range:",
min = min(df$Year),
max = max(df$Year),
value = mean(df$Year),
step = 1)
)
),
mainPanel(
plot()
)
)
UI = fluidPage(
titlePanel("Earthquake Analysis 1965-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("yearRange", "Select Year Range:",
min = min(df$Year),
max = max(df$Year),
value = mean(df$Year),
step = 1)
)
),
mainPanel(
leafletOutput("map")
)
)
library(shiny)
library(leaflet)
library(ggplot2)
library(xts)
library(lubridate)
library(dplyr)
library(tidyverse)
# Load data and handle potential issues
df <- read.csv("C:/Users/penina.wanyama/Desktop/R/statistical computing/Significant_Earthquakes-1965-2016.csv")
# filter data related to earthquakes
df <- df %>% filter(Type == "Earthquake")
df$Date <- as.Date(df$Date, format = "%m/%d/%Y")
df$Year <- year(df$Date)
df <- df[!is.na(df$Year), ]
# head(df)
#create a Shiny UI
UI = fluidPage(
titlePanel("Earthquake Analysis 1965-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("yearRange", "Select Year Range:",
min = min(df$Year),
max = max(df$Year),
value = mean(df$Year),
step = 1)
)
),
mainPanel(
uiOutput("mainContent")
)
)
library(shiny)
library(leaflet)
library(ggplot2)
library(xts)
library(lubridate)
library(dplyr)
library(tidyverse)
# Load data and handle potential issues
df <- read.csv("C:/Users/penina.wanyama/Desktop/R/statistical computing/Significant_Earthquakes-1965-2016.csv")
# filter data related to earthquakes
df <- df %>% filter(Type == "Earthquake")
df$Date <- as.Date(df$Date, format = "%m/%d/%Y")
df$Year <- year(df$Date)
df <- df[!is.na(df$Year), ]
# head(df)
#create a Shiny UI
UI = fluidPage(
titlePanel("Earthquake Analysis 1965-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("yearRange", "Select Year Range:",
min = min(df$Year),
max = max(df$Year),
value = mean(df$Year),
step = 1)
)
),
mainPanel(
uiOutput("mainContent")
)
)
library(shiny)
library(leaflet)
library(ggplot2)
library(xts)
library(lubridate)
library(dplyr)
library(tidyverse)
# Load data and handle potential issues
df <- read.csv("C:/Users/penina.wanyama/Desktop/R/statistical computing/Significant_Earthquakes-1965-2016.csv")
# filter data related to earthquakes
df <- df %>% filter(Type == "Earthquake")
df$Date <- as.Date(df$Date, format = "%m/%d/%Y")
df$Year <- year(df$Date)
df <- df[!is.na(df$Year), ]
# head(df)
#create a Shiny UI
UI = fluidPage(
titlePanel("Earthquake Analysis 1965-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("yearRange", "Select Year Range:",
min = min(df$Year),
max = max(df$Year),
value = mean(df$Year),
step = 1)
)
),
mainPanel(
uiOutput("mainContent")
)
)
#the map
output$map <- renderLeaflet({
leaflet(filtered_df()) %>%
addTiles() %>%
addCircleMarkers(
lng = ~Longitude,
lat = ~ Latitude,
radius = 3,
stroke = FALSE,
fillOpacity = 0.5,
popup = ~paste("Magnitude:"Magnitude)
library(shiny)
library(leaflet)
library(ggplot2)
library(xts)
library(lubridate)
library(dplyr)
library(tidyverse)
# Load data and handle potential issues
df <- read.csv("C:/Users/penina.wanyama/Desktop/R/statistical computing/Significant_Earthquakes-1965-2016.csv")
# filter data related to earthquakes
df <- df %>% filter(Type == "Earthquake")
df$Date <- as.Date(df$Date, format = "%m/%d/%Y")
df$Year <- year(df$Date)
df <- df[!is.na(df$Year), ]
# head(df)
#create a Shiny UI
UI = fluidPage(
titlePanel("Earthquake Analysis 1965-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("yearRange", "Select Year Range:",
min = min(df$Year),
max = max(df$Year),
value = mean(df$Year),
step = 1)
),
mainPanel(
uiOutput("mainContent")
)
)
)
#server logic
server <- function(input, output){
#reactive functions for filtered data and visualizations
filtered_df <- reactive({
df %>%
filter(Year >= input$yearRange[1], Year <= input$yearRange[2])
})
#render dynamic content based on the reactive expression
output$mainContent <- renderUI({
leafletOutput("map") #render the map
})
#the map
output$map <- renderLeaflet({
leaflet(filtered_df()) %>%
addTiles() %>%
addCircleMarkers(
lng = ~Longitude,
lat = ~ Latitude,
radius = 3,
stroke = FALSE,
fillOpacity = 0.5,
popup = ~paste("Magnitude:"Magnitude)
leaflet(filtered_df()) %>%
addTiles() %>%
addCircleMarkers(
lng = ~Longitude,
lat = ~ Latitude,
radius = 3,
stroke = FALSE,
fillOpacity = 0.5,
popup = ~paste("Magnitude:", Magnitude)
)
leaflet(filtered_df()) %>%
addTiles() %>%
addCircleMarkers(
lng = ~Longitude,
lat = ~ Latitude,
radius = 3,
stroke = FALSE,
fillOpacity = 0.5,
popup = ~paste("Magnitude:", Magnitude)
)
library(shiny)
library(leaflet)
library(ggplot2)
library(xts)
library(lubridate)
library(dplyr)
library(tidyverse)
# Load data and handle potential issues
df <- read.csv("C:/Users/penina.wanyama/Desktop/R/statistical computing/Significant_Earthquakes-1965-2016.csv")
# filter data related to earthquakes
df <- df %>% filter(Type == "Earthquake")
df$Date <- as.Date(df$Date, format = "%m/%d/%Y")
df$Year <- year(df$Date)
df <- df[!is.na(df$Year), ]
# head(df)
#create a Shiny UI
UI = fluidPage(
titlePanel("Earthquake Analysis 1965-2016"),
sidebarLayout(
sidebarPanel(
sliderInput("yearRange", "Select Year Range:",
min = min(df$Year),
max = max(df$Year),
value = mean(df$Year),
step = 1)
),
mainPanel(
uiOutput("mainContent")
)
)
)
#server logic
server <- function(input, output){
#reactive functions for filtered data and visualizations
filtered_df <- reactive({
df %>%
filter(Year >= input$yearRange[1], Year <= input$yearRange[2])
})
#render dynamic content based on the reactive expression
output$mainContent <- renderUI({
leafletOutput("map") #render the map
})
#the map
output$map <- renderLeaflet({
leaflet(filtered_df()) %>%
addTiles() %>%
addCircleMarkers(
lng = ~Longitude,
lat = ~ Latitude,
radius = 3,
stroke = FALSE,
fillOpacity = 0.5,
popup = ~paste("Magnitude:", Magnitude)
)
})
}
#run the app
shinyApp(ui=ui, server=server)
runApp('statistical computing')
shiny::runApp('statistical computing')
gc()
runApp('statistical computing')
runApp('statistical computing')
runApp('shiny/Eartquaake_analysis')
runApp('shiny/Eartquaake_analysis')
runApp('statistical computing')
runApp('statistical computing')
runApp('statistical computing')
runApp('statistical computing')
runApp('statistical computing')
gc()
runApp('statistical computing')
runApp('statistical computing')
shiny::runApp('statistical computing')
shiny::runApp('statistical computing')
runApp('statistical computing')
